% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/time_pipe.R
\name{time_pipe}
\alias{time_pipe}
\title{Measure execution time in a pipeline}
\usage{
time_pipe(
  .data,
  label = NULL,
  log = getOption("pipetime.log", NULL),
  console = getOption("pipetime.console", TRUE),
  unit = getOption("pipetime.unit", "secs")
)
}
\arguments{
\item{.data}{Input object passed through the pipeline.}

\item{label}{Optional. Name for the operation. Defaults to the expression if not provided.}

\item{log}{Character or NULL. Name of a data frame to store logs in \code{.pipetime_env}. Defaults to NULL (no storage).}

\item{console}{Logical. Print timing to the console? Defaults to TRUE.}

\item{unit}{Character. Time unit passed to \code{\link[base:difftime]{base::difftime()}}. One of \code{"secs"}, \code{"mins"}, \code{"hours"}, \code{"days"}, or \code{"weeks"}. Defaults to \code{"secs"}.}
}
\value{
The input object, unchanged. Timing information is printed or stored separately.
}
\description{
Records the runtime of pipeline (|>) operation.
Can print the timing to the console and optionally log it to a data frame in \code{.pipetime_env}.
Defaults can be set via \code{options()}.
}
\details{
\code{time_pipe()} measures the elapsed time of the pipeline from its start to the point where \code{time_pipe()} is called.
}
\examples{
library(dplyr)
data.frame(x = 1:3) |>
mutate(y = {Sys.sleep(0.5); x*2 }) |>
time_pipe("calc 1") |>
mutate(z = {Sys.sleep(0.5); x/2 }) |>
time_pipe("total pipeline")

}
