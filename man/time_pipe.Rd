% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/time_pipe.R
\name{time_pipe}
\alias{time_pipe}
\title{Time operations in a pipeline
Measure how long a data operation or function takes within a pipeline (\verb{|>}).
This can be used to check performance of steps in your data workflow.}
\usage{
time_pipe(
  .data,
  label = NULL,
  log_file = NULL,
  console = TRUE,
  time_unit = c("secs", "millisecs", "mins", "hours")
)
}
\arguments{
\item{.data}{A data object to pass through the pipeline.}

\item{label}{Optional. A descriptive name for the operation. If not provided, the expression will be passed.}

\item{log_file}{Optional. File path to write timing logs. If \code{NULL}, messages are only printed to the console.}

\item{console}{Logical. Whether to print timing messages to the console. Default is \code{TRUE}.}

\item{time_unit}{Character. Unit of time to report. One of \code{"secs"}, \code{"millisecs"}, \code{"mins"} or \code{"hours"}.}
}
\value{
Returns the result of the pipeline step, unchanged. Timing messages are printed or logged separately.
}
\description{
Time operations in a pipeline
Measure how long a data operation or function takes within a pipeline (\verb{|>}).
This can be used to check performance of steps in your data workflow.
}
\examples{
library(dplyr)
data.frame(x = 1:3) |>
mutate(y = {Sys.sleep(0.5); x*2 }) |>
time_pipe("calc 1") |>
mutate(z = {Sys.sleep(0.5); x/2 }) |>
time_pipe("total pipeline")

}
