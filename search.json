[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Cyril Geismar Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/timing_operations_in_pipelines.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Timing Operations in R Pipelines","text":"R pipelines (|>) allow chaining operations readable, sequential way. Existing timing tools (e.g. system.time(), tictoc) integrate naturally pipelines tidy workflows.","code":""},{"path":"/articles/timing_operations_in_pipelines.html","id":"demonstration","dir":"Articles","previous_headings":"","what":"Demonstration","title":"Timing Operations in R Pipelines","text":"","code":"complex_fn <- function(x) {   Sys.sleep(0.1)  # Simulate a time-consuming operation   x^2 }"},{"path":"/articles/timing_operations_in_pipelines.html","id":"system-time","dir":"Articles","previous_headings":"Demonstration","what":"system.time()","title":"Timing Operations in R Pipelines","text":"","code":"# Must wrap entire pipeline, breaking the flow the_time <- system.time({   df <- data.frame(x = 1:3) |>     mutate(y = complex_fn(x)) |>     summarise(mean_y = mean(y)) }) the_time #>    user  system elapsed  #>   0.008   0.000   0.108 df #>     mean_y #> 1 4.666667"},{"path":"/articles/timing_operations_in_pipelines.html","id":"tictoc","dir":"Articles","previous_headings":"Demonstration","what":"tictoc","title":"Timing Operations in R Pipelines","text":"","code":"library(tictoc)  # Manual start/stop, not inline tic(\"total pipeline\") df <- data.frame(x = 1:3) |>   mutate(y = complex_fn(x)) |>   summarise(mean_y = mean(y)) toc() #> total pipeline: 0.105 sec elapsed df #>     mean_y #> 1 4.666667"},{"path":"/articles/timing_operations_in_pipelines.html","id":"time_pipe","dir":"Articles","previous_headings":"Demonstration","what":"time_pipe","title":"Timing Operations in R Pipelines","text":"","code":"# Inline timing checkpoints, keeps pipeline flow data.frame(x = 1:3) |>   mutate(y = complex_fn(x)) |>   time_pipe(\"after mutate\") |>   summarise(mean_y = mean(y)) |>   time_pipe(\"total pipeline\") #> [2025-09-20 20:03:40.528] after mutate: 0.1012 secs #> [2025-09-20 20:03:40.528] total pipeline: 0.1067 secs #>     mean_y #> 1 4.666667"},{"path":"/articles/timing_operations_in_pipelines.html","id":"why-pipetime","dir":"Articles","previous_headings":"","what":"Why pipetime?","title":"Timing Operations in R Pipelines","text":"Works directly inside pipelines. Supports multiple timing checkpoints. Prints cumulative time without breaking pipeline.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cyril Geismar. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Geismar C (2025). pipetime: Tools Time Pipe Operations. R package version 0.0.1, https://cygei.github.io/pipetime/;.","code":"@Manual{,   title = {pipetime: Tools to Time Pipe Operations},   author = {Cyril Geismar},   year = {2025},   note = {R package version 0.0.1},   url = {https://cygei.github.io/pipetime/;}, }"},{"path":"/index.html","id":"pipetime-","dir":"","previous_headings":"","what":"pipetime","title":"pipetime","text":"pipetime measures runtime pipeline operations. works native R pipe (|>) fits naturally ‘tidy workflows’.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"pipetime","text":"","code":"# devtools::install_github(\"CyGei/pipetime\") library(pipetime) library(dplyr)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"pipetime","text":"Place time_pipe() point pipeline measure elapsed time start point: timing includes operations time_pipe(). can insert multiple time_pipe() calls add checkpoints along pipeline: time_pipe() reports cumulative time since start pipeline.","code":"data.frame(x = 1:3) |>   mutate(sleep = Sys.sleep(0.1)) |> # e.g. a complex operation   summarise(mean_x = mean(x)) |>   time_pipe(\"total pipeline\") # ~0.1 sec #> [2025-09-20 15:57:03.973] total pipeline: 0.1092 secs #>   mean_x #> 1      2 complex_fn <- function(duration,x) {   Sys.sleep(duration)  # Simulate a time-consuming operation   rnorm(n = length(x), mean = x, sd = 1) }  data.frame(x = 1:5) |>    mutate(y = complex_fn(0.5, x)) |>   time_pipe(\"compute y\") |>    mutate(z = complex_fn(0.5, y)) |>    time_pipe(\"compute z\") |>   summarise(mean_z = mean(z)) |>   time_pipe(\"total pipeline\") #> [2025-09-20 15:57:04.090] compute y: 0.5069 secs #> [2025-09-20 15:57:04.090] compute z: 1.0118 secs #> [2025-09-20 15:57:04.090] total pipeline: 1.0142 secs #>     mean_z #> 1 3.134429"},{"path":"/index.html","id":"logging-to-a-dataframe","dir":"","previous_headings":"","what":"Logging to a dataframe","title":"pipetime","text":"can save timing logs dataframe using df argument. Provide df character string naming dataframe. time time_pipe() called, dataframe .GlobalEnv created (needed) updated new row. Alternatively, can set global default session using options(): options(pipetime.df = \"log_df\"). can omit df argument time_pipe() calls.","code":"df_1 <- data.frame(x = 1:5) |>    mutate(y = complex_fn(0.5, x)) |>   time_pipe(\"compute y\", df = \"log_df\") #> [2025-09-20 15:57:05.113] compute y: 0.5072 secs  df_2 <- df_1 |>    mutate(z = complex_fn(0.5, y)) |>   time_pipe(\"compute z\", df = \"log_df\") #> [2025-09-20 15:57:05.625] compute z: 0.5064 secs  log_df #>                 timestamp     label duration time_unit #> 1 2025-09-20 15:57:05.113 compute y   0.5072      secs #> 2 2025-09-20 15:57:05.625 compute z   0.5064      secs"},{"path":"/index.html","id":"logging-to-a-file","dir":"","previous_headings":"","what":"Logging to a file","title":"pipetime","text":"can save timing logs file using log_file argument. simplicity, can set global default session using options(): timing messages logged pipetime.log working directory.","code":"options(pipetime.log_file = \"pipetime.log\") df <- data.frame(x = 1:5) |>    mutate(y = complex_fn(0.1, x)) |>   time_pipe(\"compute y\",console = FALSE ) |>    mutate(z = complex_fn(0.1, y)) |>    time_pipe(\"compute z\",console = FALSE) |>   summarise(mean_z = mean(z)) |>   time_pipe(\"total pipeline\",console = FALSE) readLines(\"pipetime.log\") #> [1] \"[2025-09-20 15:57:06.148] compute y: 0.1073 secs\"      #> [2] \"[2025-09-20 15:57:06.148] compute z: 0.2165 secs\"      #> [3] \"[2025-09-20 15:57:06.148] total pipeline: 0.2199 secs\""},{"path":"/reference/time_pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure execution time in a pipeline — time_pipe","title":"Measure execution time in a pipeline — time_pipe","text":"Records runtime pipeline (|>) operation. Can print timing console, log file, /save results data frame later use. Arguments can also set globally via options().","code":""},{"path":"/reference/time_pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure execution time in a pipeline — time_pipe","text":"","code":"time_pipe(   .data,   label = NULL,   df = getOption(\"pipetime.df\", NULL),   log_file = getOption(\"pipetime.log_file\", NULL),   console = getOption(\"pipetime.console\", TRUE),   time_unit = getOption(\"pipetime.time_unit\", \"secs\") )"},{"path":"/reference/time_pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure execution time in a pipeline — time_pipe","text":".data input object passed pipeline. label Optional. Name operation. Defaults expression provided. df Optional. Name data frame store timing results. Defaults NULL (storage). log_file Optional. File path append timing logs. Defaults NULL (logging). console Logical. Print messages console? Defaults TRUE. time_unit Character. Unit time. Must one \"secs\", \"mins\", \"hours\", \"days\", \"weeks\". Passed directly base::difftime(). Defaults \"secs\".","code":""},{"path":"/reference/time_pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure execution time in a pipeline — time_pipe","text":"input object, unchanged. Timing printed, logged, stored separately.","code":""},{"path":"/reference/time_pipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure execution time in a pipeline — time_pipe","text":"time_pipe() measures elapsed time operation start pipeline point time_pipe() called.","code":""},{"path":"/reference/time_pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure execution time in a pipeline — time_pipe","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data.frame(x = 1:3) |> mutate(y = {Sys.sleep(0.5); x*2 }) |> time_pipe(\"calc 1\") |> mutate(z = {Sys.sleep(0.5); x/2 }) |> time_pipe(\"total pipeline\") #> [2025-09-20 20:03:37.130] calc 1: 0.5060 secs #> [2025-09-20 20:03:37.130] total pipeline: 1.0127 secs #>   x y   z #> 1 1 2 0.5 #> 2 2 4 1.0 #> 3 3 6 1.5"}]
