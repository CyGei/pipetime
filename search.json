[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Cyril Geismar Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/timing_R_pipelines.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Timing R Pipelines","text":"pipetime enables inline timing R pipelines (|>), helping identify performance bottlenecks compare different approaches without disrupting workflow. illustrate text processing example, comparing base R string functions optimized stringr package common data cleaning tasks. Workflow üê¢ : Uses base R string functions (gsub, substr, grepl). Workflow B üöÄ: Uses stringr‚Äôs optimised functions.","code":""},{"path":"/articles/timing_R_pipelines.html","id":"example-data","dir":"Articles","previous_headings":"Overview","what":"Example Data","title":"Timing R Pipelines","text":"","code":"set.seed(123) make_str <- function(n) paste(sample(letters, n, TRUE), collapse = \"\")  text_data <- data.frame(   id = 1:1e5,   email = paste0(     sapply(sample(5:15, 1e5, TRUE), make_str),     sample(c(\"@gmail.com\", \"@yahoo.com\", \"@hotmail.com\"), 1e5, TRUE)   ),   phone = paste0(     \"(\",     sample(100:999, 1e5, TRUE),     \") \",     sample(100:999, 1e5, TRUE),     \"-\",     sample(1000:9999, 1e5, TRUE)   ),   text = sapply(sample(20:100, 1e5, TRUE), make_str) ) head(text_data, n = 3) #>   id                      email          phone #> 1  1        qgxxfbv@hotmail.com (751) 344-7289 #> 2  2          itajkbw@yahoo.com (246) 230-8897 #> 3  3 nlgbhuoikefcml@hotmail.com (918) 284-3213 #>                                 text #> 1         ebivtrgrqnoawlpnpaanydepmn #> 2               fsibsapgehcsjmyvjuis #> 3 qouuphjmkgyttyeaxttydtuuguklfrlwvn"},{"path":"/articles/timing_R_pipelines.html","id":"timing-workflows","dir":"Articles","previous_headings":"Overview","what":"Timing Workflows","title":"Timing R Pipelines","text":"use log argument workflow stores timings separately.","code":"library(dplyr) library(pipetime) options(pipetime.console = FALSE) # Workflow A: Base R wf_A <- text_data |>   mutate(     domain = sub(\".*@\", \"\", email),     clean_phone = gsub(\"[^0-9]\", \"\", phone),     word_count = lengths(strsplit(text, \" \"))   ) |>   time_pipe(\"extract & clean\", log = \"base\") |>   filter(grepl(\"^[a-m]\", text)) |>   time_pipe(\"filter\", log = \"base\") |>   mutate(     text_upper = toupper(text),     truncated = substr(text, 1, 50)   ) |>   time_pipe(\"transform\", log = \"base\")  # Workflow B: stringr (optimized) wf_B <- text_data |>   mutate(     domain = str_extract(email, \"(?<=@).*\"),     clean_phone = str_remove_all(phone, \"[^0-9]\"),     word_count = str_count(text, \"\\\\S+\")   ) |>   time_pipe(\"extract & clean\", log = \"stringr\") |>   filter(str_detect(text, \"^[a-m]\")) |>   time_pipe(\"filter\", log = \"stringr\") |>   mutate(     text_upper = str_to_upper(text),     truncated = str_sub(text, 1, 50)   ) |>   time_pipe(\"transform\", log = \"stringr\")"},{"path":"/articles/timing_R_pipelines.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Timing R Pipelines","text":"","code":"# Collect both logs logs <- get_log() |>   bind_rows(.id = \"workflow\") |>   group_by(workflow) |>   # Add a starting point   group_modify(~ add_row(.x, duration = 0, label = \"start\", .before = 1)) |>   mutate(step = factor(row_number()))  library(ggplot2) logs |>   ggplot(     aes(       x = step,       y = duration,       colour = workflow,       group = workflow     )   ) +   geom_line(linewidth = 1) +   geom_point(size = 3) +   geom_text(aes(label = label), vjust = -0.7, size = 3.5, show.legend = FALSE) +   labs(     x = \"Step\",     y = \"Cumulative time (sec)\",     title = \"Base R vs stringr\",     colour = \"Workflow\"   ) +   theme_classic()"},{"path":"/articles/why_pipetime.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Why pipetime?","text":"","code":"slow_op <- function(x) {   Sys.sleep(0.1)  # Simulate a time-consuming operation   x^2 }"},{"path":"/articles/why_pipetime.html","id":"system-time","dir":"Articles","previous_headings":"Examples","what":"system.time()","title":"Why pipetime?","text":"","code":"# Must wrap the entire pipeline, breaking the flow the_time <- system.time({   df <- data.frame(x = 1:3) |>     mutate(y = slow_op(x)) |>     summarise(mean_y = mean(y)) }) the_time #>    user  system elapsed  #>   0.009   0.000   0.109 df #>     mean_y #> 1 4.666667  # system.time() cannot be inserted inline in a pipeline: data.frame(x = 1:3) |>   mutate(y = slow_op(x)) |>   # system.time() would break the pipeline here   summarise(mean_y = mean(y)) #>     mean_y #> 1 4.666667"},{"path":"/articles/why_pipetime.html","id":"tictoc","dir":"Articles","previous_headings":"Examples","what":"tictoc","title":"Why pipetime?","text":"","code":"library(tictoc)  # Requires manual start/stop tic(\"total pipeline\") df <- data.frame(x = 1:3) |>   mutate(y = slow_op(x)) |>   summarise(mean_y = mean(y)) toc() #> total pipeline: 0.104 sec elapsed df #>     mean_y #> 1 4.666667"},{"path":"/articles/why_pipetime.html","id":"time_pipe","dir":"Articles","previous_headings":"Examples","what":"time_pipe","title":"Why pipetime?","text":"","code":"# Inline timing checkpoints, pipeline stays intact data.frame(x = 1:3) |>   mutate(y = slow_op(x)) |>   time_pipe(\"after mutate\") |>   summarise(mean_y = mean(y)) |>   time_pipe(\"total pipeline\") #> [2025-10-08 00:30:34.132] after mutate: +0.1017 secs #> [2025-10-08 00:30:34.132] total pipeline: +0.1078 secs #>     mean_y #> 1 4.666667"},{"path":"/articles/why_pipetime.html","id":"why-pipetime","dir":"Articles","previous_headings":"","what":"Why pipetime?","title":"Why pipetime?","text":"Works directly inside pipelines. Supports multiple checkpoints. Prints logs timings .pipetime_env (see ?get_log).","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cyril Geismar. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Geismar C (2025). pipetime: Tools Time Pipe Operations. R package version 0.0.1, https://cygei.github.io/pipetime/;.","code":"@Manual{,   title = {pipetime: Tools to Time Pipe Operations},   author = {Cyril Geismar},   year = {2025},   note = {R package version 0.0.1},   url = {https://cygei.github.io/pipetime/;}, }"},{"path":"/index.html","id":"pipetime-","dir":"","previous_headings":"","what":"pipetime","title":"pipetime","text":"‚è≥ pipetime measures elapsed time R pipelines. Insert time_pipe() anywhere pipeline print log time since pipeline started. works native R pipe (|>) fits naturally tidyverse workflows.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"pipetime","text":"Install GitHub load alongside dplyr examples:","code":"# devtools::install_github(\"CyGei/pipetime\") library(pipetime) library(dplyr)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"pipetime","text":"Place time_pipe() end pipeline measure total elapsed time: Use multiple time_pipe() calls mark steps along pipeline: ‚è±Ô∏è time_pipe() reports cumulative time since pipeline started.","code":"slow_op <- function(delay, x) {   Sys.sleep(delay)  # Simulate a time-consuming operation   rnorm(n = length(x), mean = x, sd = 1) }  data.frame(x = 1:3) |>   mutate(sleep = slow_op(0.1, x)) |>   summarise(mean_x = mean(x)) |>   time_pipe(\"total pipeline\") # ~+0.1 sec #> [2025-10-07 20:23:58.956] total pipeline: +0.1097 secs #>   mean_x #> 1      2 data.frame(x = 1:5) |>    mutate(y = slow_op(0.5, x)) |>   time_pipe(\"compute y\") |>    mutate(z = slow_op(0.5, y)) |>    time_pipe(\"compute z\") |>   summarise(mean_z = mean(z)) |>   time_pipe(\"total pipeline\") #> [2025-10-07 20:23:59.075] compute y: +0.5061 secs #> [2025-10-07 20:23:59.075] compute z: +1.0137 secs #> [2025-10-07 20:23:59.075] total pipeline: +1.0162 secs #>     mean_z #> 1 3.158184"},{"path":"/index.html","id":"logging","dir":"","previous_headings":"","what":"Logging","title":"pipetime","text":"üìù Use log save timings hidden environment (.pipetime_env):","code":"df <- data.frame(x = 1:5) |>    mutate(y = slow_op(0.5, x)) |>   time_pipe(\"compute y\", log = \"timings\") |>   mutate(z = slow_op(0.5, y)) |>   time_pipe(\"compute z\", log = \"timings\") #> [2025-10-07 20:24:00.102] compute y: +0.5074 secs #> [2025-10-07 20:24:00.102] compute z: +1.0198 secs  get_log(\"timings\") #>             timestamp     label  duration unit #> 1 2025-10-07 20:24:00 compute y 0.5073919 secs #> 2 2025-10-07 20:24:00 compute z 1.0197811 secs rm_log(\"timings\") #delete the dataframe in .pipetime_env"},{"path":"/index.html","id":"managing-logs","dir":"","previous_headings":"","what":"Managing logs","title":"pipetime","text":"get_log(\"name\") ‚Üí return one log get_log(NULL) ‚Üí return logs named list rm_log(\"name\") ‚Üí remove one log rm_log(NULL, force = TRUE) ‚Üí remove logs","code":""},{"path":"/index.html","id":"options","dir":"","previous_headings":"","what":"Options","title":"pipetime","text":"can also set session‚Äëwide defaults:","code":"options(pipetime.log = \"timings\",         pipetime.console = TRUE,         pipetime.unit = \"secs\")"},{"path":"/reference/get_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a timing log (or all logs) ‚Äî get_log","title":"Retrieve a timing log (or all logs) ‚Äî get_log","text":"Return stored timing log .pipetime_env. log = NULL, return logs named list.","code":""},{"path":"/reference/get_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a timing log (or all logs) ‚Äî get_log","text":"","code":"get_log(log = NULL)"},{"path":"/reference/get_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a timing log (or all logs) ‚Äî get_log","text":"log Character string NULL. Name log retrieve. NULL, logs returned.","code":""},{"path":"/reference/get_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a timing log (or all logs) ‚Äî get_log","text":"Either: data frame columns: timestamp (POSIXct): Pipeline start time label (character): Operation label duration (numeric): Elapsed time since pipeline start unit (character): Time unit used , log = NULL, named list data frames.","code":""},{"path":[]},{"path":"/reference/rm_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a timing log (or all logs) ‚Äî rm_log","title":"Remove a timing log (or all logs) ‚Äî rm_log","text":"Delete timing log .pipetime_env. log = NULL, logs removed, force = TRUE.","code":""},{"path":"/reference/rm_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a timing log (or all logs) ‚Äî rm_log","text":"","code":"rm_log(log = NULL, force = FALSE)"},{"path":"/reference/rm_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a timing log (or all logs) ‚Äî rm_log","text":"log Character string NULL. Name log remove. NULL, logs targeted. force Logical. remove logs, force must TRUE. Default: FALSE.","code":""},{"path":"/reference/rm_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a timing log (or all logs) ‚Äî rm_log","text":"Invisibly, TRUE.","code":""},{"path":[]},{"path":"/reference/time_pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure execution time in a pipeline ‚Äî time_pipe","title":"Measure execution time in a pipeline ‚Äî time_pipe","text":"Records runtime pipeline (|>) start point time_pipe() called. Prints results console /logs .pipetime_env. Defaults can set via options(pipetime.*).","code":""},{"path":"/reference/time_pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure execution time in a pipeline ‚Äî time_pipe","text":"","code":"time_pipe(   .data,   label = NULL,   log = getOption(\"pipetime.log\", NULL),   console = getOption(\"pipetime.console\", TRUE),   unit = getOption(\"pipetime.unit\", \"secs\") )"},{"path":"/reference/time_pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure execution time in a pipeline ‚Äî time_pipe","text":".data Input object passed pipeline. label Character string. Operation name. Defaults expression NULL. log Character string NULL. Name log data frame .pipetime_env. Default: NULL. console Logical. Print timing console? Default: TRUE. unit Character string. Time unit base::difftime(). One \"secs\", \"mins\", \"hours\", \"days\", \"weeks\". Default: \"secs\".","code":""},{"path":"/reference/time_pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure execution time in a pipeline ‚Äî time_pipe","text":".data, unchanged. Timing information printed /stored separately.","code":""},{"path":"/reference/time_pipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure execution time in a pipeline ‚Äî time_pipe","text":"time_pipe() measures elapsed time pipeline start call. log set, results appended data frame .pipetime_env columns: timestamp: Pipeline start time (POSIXct) label: Operation label duration: Elapsed time since pipeline start (numeric) unit: Time unit used Stored logs can retrieved get_log().","code":""},{"path":"/reference/time_pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure execution time in a pipeline ‚Äî time_pipe","text":"","code":"library(dplyr) #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union data.frame(x = 1:3) |> mutate(y = {Sys.sleep(0.5); x*2 }) |> time_pipe(\"calc 1\") |> mutate(z = {Sys.sleep(0.5); x/2 }) |> time_pipe(\"total pipeline\") #> [2025-10-08 00:30:20.514] calc 1: +0.5058 secs #> [2025-10-08 00:30:20.514] total pipeline: +1.0126 secs #>   x y   z #> 1 1 2 0.5 #> 2 2 4 1.0 #> 3 3 6 1.5"}]
