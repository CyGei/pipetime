[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Cyril Geismar Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/timing_operations_in_pipelines.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Timing Operations in R Pipelines","text":"R pipelines (|>) allow chaining operations readable, sequential way. Existing timing tools (e.g. system.time(), tictoc) integrate naturally pipelines tidy workflows.","code":""},{"path":"/articles/timing_operations_in_pipelines.html","id":"demonstration","dir":"Articles","previous_headings":"","what":"Demonstration","title":"Timing Operations in R Pipelines","text":"","code":"complex_fn <- function(x) {   Sys.sleep(0.1)  # Simulate a time-consuming operation   x^2 }"},{"path":"/articles/timing_operations_in_pipelines.html","id":"system-time","dir":"Articles","previous_headings":"Demonstration","what":"system.time()","title":"Timing Operations in R Pipelines","text":"","code":"# Must wrap entire pipeline to record the time, breaking the flow the_time <- system.time({   df <- data.frame(x = 1:3) |>     mutate(y = complex_fn(x)) |>     summarise(mean_y = mean(y)) }) the_time #>    user  system elapsed  #>   0.009   0.000   0.109 df #>     mean_y #> 1 4.666667  # Doesn't return the result of the pipeline, so will give an error data.frame(x = 1:3) |>   mutate(y = complex_fn(x)) |>   system_time() |>   summarise(mean_y = mean(y)) #> Error in system_time(mutate(data.frame(x = 1:3), y = complex_fn(x))): could not find function \"system_time\""},{"path":"/articles/timing_operations_in_pipelines.html","id":"tictoc","dir":"Articles","previous_headings":"Demonstration","what":"tictoc","title":"Timing Operations in R Pipelines","text":"","code":"library(tictoc)  # Manual start/stop, not inline tic(\"total pipeline\") df <- data.frame(x = 1:3) |>   mutate(y = complex_fn(x)) |>   summarise(mean_y = mean(y)) toc() #> total pipeline: 0.105 sec elapsed df #>     mean_y #> 1 4.666667"},{"path":"/articles/timing_operations_in_pipelines.html","id":"time_pipe","dir":"Articles","previous_headings":"Demonstration","what":"time_pipe","title":"Timing Operations in R Pipelines","text":"","code":"# Inline timing checkpoints, keeps pipeline flow data.frame(x = 1:3) |>   mutate(y = complex_fn(x)) |>   time_pipe(\"after mutate\") |>   summarise(mean_y = mean(y)) |>   time_pipe(\"total pipeline\") #> [2025-09-22 18:36:04.571] after mutate: 0.1017 secs #> [2025-09-22 18:36:04.571] total pipeline: 0.1081 secs #>     mean_y #> 1 4.666667"},{"path":"/articles/timing_operations_in_pipelines.html","id":"why-pipetime","dir":"Articles","previous_headings":"","what":"Why pipetime?","title":"Timing Operations in R Pipelines","text":"Works directly inside pipelines. Supports multiple calls within pipeline. Records timing operations .pipetime_env.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cyril Geismar. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Geismar C (2025). pipetime: Tools Time Pipe Operations. R package version 0.0.1, https://cygei.github.io/pipetime/;.","code":"@Manual{,   title = {pipetime: Tools to Time Pipe Operations},   author = {Cyril Geismar},   year = {2025},   note = {R package version 0.0.1},   url = {https://cygei.github.io/pipetime/;}, }"},{"path":"/index.html","id":"pipetime-","dir":"","previous_headings":"","what":"pipetime","title":"pipetime","text":"pipetime measures runtime pipeline start time_pipe() call. works native R pipe (|>) integrates seamlessly ‘tidy workflows’.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"pipetime","text":"","code":"# devtools::install_github(\"CyGei/pipetime\") library(pipetime) library(dplyr)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"pipetime","text":"Place time_pipe() anywhere pipeline measure elapsed time start point. Insert multiple time_pipe() calls add timestamps along pipeline: time_pipe() reports cumulative time since start pipeline.","code":"data.frame(x = 1:3) |>   mutate(sleep = Sys.sleep(0.1)) |> # e.g. a complex operation   summarise(mean_x = mean(x)) |>   time_pipe(\"total pipeline\") # ~0.1 sec #> [2025-09-22 14:30:18.343] total pipeline: 0.1094 secs #>   mean_x #> 1      2 complex_fn <- function(duration,x) {   Sys.sleep(duration)  # Simulate a time-consuming operation   rnorm(n = length(x), mean = x, sd = 1) }  data.frame(x = 1:5) |>    mutate(y = complex_fn(0.5, x)) |>   time_pipe(\"compute y\") |>    mutate(z = complex_fn(0.5, y)) |>    time_pipe(\"compute z\") |>   summarise(mean_z = mean(z)) |>   time_pipe(\"total pipeline\") #> [2025-09-22 14:30:18.462] compute y: 0.5066 secs #> [2025-09-22 14:30:18.462] compute z: 1.0120 secs #> [2025-09-22 14:30:18.462] total pipeline: 1.0171 secs #>     mean_z #> 1 3.117084"},{"path":"/index.html","id":"logging-to-a-dataframe","dir":"","previous_headings":"","what":"Logging to a dataframe","title":"pipetime","text":"Save timings dataframe package’s private environment (.pipetime_env) log argument: Set global default session using: options(pipetime.log = \"timings\").","code":"df_1 <- data.frame(x = 1:5) |>    mutate(y = complex_fn(0.5, x)) |>   time_pipe(\"compute y\", log = \"timings\") #> [2025-09-22 14:30:19.494] compute y: 0.5073 secs  df_2 <- df_1 |>    mutate(z = complex_fn(0.5, y)) |>   time_pipe(\"compute z\", log = \"timings\") #> [2025-09-22 14:30:20.005] compute z: 0.5077 secs  get_log(\"timings\") #>                 timestamp     label duration unit #> 1 2025-09-22 14:30:19.494 compute y   0.5073 secs #> 2 2025-09-22 14:30:20.005 compute z   0.5077 secs rm_log(\"timings\") # delete \"timings\" from .pipetime_env"},{"path":"/reference/get_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a stored timing log — get_log","title":"Retrieve a stored timing log — get_log","text":"Retrieve stored timing log","code":""},{"path":"/reference/get_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a stored timing log — get_log","text":"","code":"get_log(log)"},{"path":"/reference/get_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a stored timing log — get_log","text":"log Character. Name data frame load .pipetime_env.","code":""},{"path":"/reference/get_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a stored timing log — get_log","text":"data frame timing logs.","code":""},{"path":"/reference/rm_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a stored timing log — rm_log","title":"Remove a stored timing log — rm_log","text":"Remove stored timing log","code":""},{"path":"/reference/rm_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a stored timing log — rm_log","text":"","code":"rm_log(log)"},{"path":"/reference/rm_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a stored timing log — rm_log","text":"log Character. Name timing log delete .pipetime_env.","code":""},{"path":"/reference/time_pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure execution time in a pipeline — time_pipe","title":"Measure execution time in a pipeline — time_pipe","text":"Records runtime pipeline (|>) operation. Can print timing console optionally log data frame .pipetime_env. Defaults can set via options().","code":""},{"path":"/reference/time_pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure execution time in a pipeline — time_pipe","text":"","code":"time_pipe(   .data,   label = NULL,   log = getOption(\"pipetime.log\", NULL),   console = getOption(\"pipetime.console\", TRUE),   unit = getOption(\"pipetime.unit\", \"secs\") )"},{"path":"/reference/time_pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure execution time in a pipeline — time_pipe","text":".data Input object passed pipeline. label Optional. Name operation. Defaults expression provided. log Character NULL. Name data frame store logs .pipetime_env. Defaults NULL (storage). console Logical. Print timing console? Defaults TRUE. unit Character. Time unit passed base::difftime(). One \"secs\", \"mins\", \"hours\", \"days\", \"weeks\". Defaults \"secs\".","code":""},{"path":"/reference/time_pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure execution time in a pipeline — time_pipe","text":"input object, unchanged. Timing information printed stored separately.","code":""},{"path":"/reference/time_pipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure execution time in a pipeline — time_pipe","text":"time_pipe() measures elapsed time pipeline start point time_pipe() called.","code":""},{"path":"/reference/time_pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure execution time in a pipeline — time_pipe","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data.frame(x = 1:3) |> mutate(y = {Sys.sleep(0.5); x*2 }) |> time_pipe(\"calc 1\") |> mutate(z = {Sys.sleep(0.5); x/2 }) |> time_pipe(\"total pipeline\") #> [2025-09-22 18:36:01.348] calc 1: 0.5059 secs #> [2025-09-22 18:36:01.348] total pipeline: 1.0171 secs #>   x y   z #> 1 1 2 0.5 #> 2 2 4 1.0 #> 3 3 6 1.5"}]
